#!/bin/bash

user=`whoami`
if [ "$user" != "root" ]
then
    echo 'Sorry, this shell script must be run as root; perhaps you meant to use "sudo"?'
    exit
fi

dir=$(dirname $0)
log=/home/pi/install.log
echo "" &>> ${log}
chown pi:pi ${log}


gid=$(cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2)
#echo "befor GID: ${gid}"
while [ "${gid}" != "$(echo ${gid} | sed 's/^0//g')" ]
do
    gid=$(echo ${gid} | sed 's/^0//g')
done
#echo "after GID: ${gid}"
newname="t2p_${gid}"
if [ "t2p_${gid}" != "$(hostname)" ]
then
    echo ""
    echo "Setting hostname to: t2p_${gid}"
    echo "Setting hostname to: t2p_${gid}" &>> ${log}
    ${dir}/sethostname.bsh "t2p_${gid}" &>> ${log}

    echo "Setting password to: hanelinus"
    echo "Setting password to: hanelinus" &>> ${log}
    echo -e "hanelinus\nhanelinus" | passwd pi &>> ${log}
fi



echo "" &>> ${log}
echo "New install invocation" &>> ${log}
date &>> ${log}


echo ""
echo "Performing apt update"
echo "Performing apt update" &>> ${log}
apt-get update &>> ${log}

echo ""
echo "Performing apt upgrade"
echo "Performing apt upgrade" &>> ${log}
apt-get -y upgrade &>> ${log}

echo ""
echo "Installing cups"
echo "Installing cups" &>> ${log}
apt-get install -y cups &>> ${log}


echo ""
echo "Installing lpr"
echo "Installing lpr" &>> ${log}
apt-get install -y lpr &>> ${log}


echo ""
echo "Adding user pi to group lpadmin"
echo "Adding user pi to group lpadmin" &>> ${log}
usermod -a -G lpadmin pi &>> ${log}


if [ ! -f "/etc/wpa_supplicant/wpa_supplicant.conf.pristine" ]
then
    echo ""
    echo ""
    echo "Setting up WiFi connectivity for administration access"
    echo "For future reference, please note:"
    echo "   SSID: HANELINUS"
    echo "   password: 0123456789"
    echo "" &>> ${log}
    echo "Setting up WiFi connectivity for administration access" &>> ${log}
    echo "For future reference, please note:" &>> ${log}
    echo "   SSID: HANELINUS" &>> ${log}
    echo "   password: 0123456789" &>> ${log}
    echo "" &>> ${log}
    cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf.pristine
    cp ${dir}/etc/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
fi


echo ""
echo "Configurin CUPs"
if [ ! -f "/etc/cups/cupsd.conf.pristine" ]
then
   cp /etc/cups/cupsd.conf /etc/cups/cupsd.conf.pristine
fi

cat /etc/cups/cupsd.conf.pristine \
   | sed 's/Listen localhost:631/Port 631/g' \
   | sed 's?</Location>?  Allow @local\'$'\n</Location>?g' \
   > /etc/cups/cupsd.conf

#iptables -A INPUT -i wlan0 -p tcp -m tcp --dport 631 -j ACCEPT
#iptables -A INPUT -i wlan0 -p udp -m udp --dport 631 -j ACCEPT

echo ""
echo "Restarting CUPs"
/etc/init.d/cups restart &>> ${log}

if [[ "0" != "$(grep -c 'console=[a-zA-Z0-9_]*,[a-zA-Z0-9_]*' /boot/cmdline.txt)" ]]
then
    cat /boot/cmdline.txt \
	| sed 's/ console=[a-zA-Z0-9_]*,[a-zA-Z0-9_]* / /g' \
	> /tmp/cmdline.txt
    echo ""
    echo "Removing kernel console activation from /boot/cmdline.txt"
    echo "Removing kernel console activation from /boot/cmdline.txt:" &>> ${log}
    cat /tmp/cmdline.txt &>> ${log}
    cp /tmp/cmdline.txt /boot/cmdline.txt
fi

has_enable_uart=$(cat /boot/config.txt | grep -c enable_uart)
if [[ "${has_enable_uart}" = "0" ]]
then
    # then just need to append
    echo "" >> /boot/config.txt
    echo "# Enable application use of UART" >> /boot/config.txt
    echo "enable_uart=1" >> /boot/config.txt
    echo "" >> /boot/config.txt

    # log it
    echo ""
    echo "Enabling UART"
    echo "Enabling UART" &>> ${log}
    echo "Here's the resulting /boot/config.txt:" &>> ${log}
    cat /boot/config.txt &>> ${log}
else
    has_enable_uart0=$(cat /boot/config.txt | grep enable_uart | grep -c "0")
    if [[ "${has_enable_uart0}" = "1" ]]
    then
	# have to change it to 1
	cat /boot/config.txt \
	    | sed 's/enable_uart[ ]*=[ ]0/enable_uart=1/g' \
	    > /tmp/config.txt
	cp /tmp/config.txt /boot/config.txt
	
	# log it
	echo ""
	echo "Enabling UART"
	echo "Enabling UART" &>> ${log}
	echo "Here's the resulting /boot/config.txt:" &>> ${log}
	cat /boot/config.txt &>> ${log}
    else
	echo ""
	echo "UART is already enabled in /boot/config.txt"
	echo "UART is already enabled in /boot/config.txt" &>> ${log}
    fi
fi


#echo ""
#echo "Install nfc support"
#echo "Install nfc support" &>> ${log}
#${dir}/build_nfc.bsh &>> ${log}


echo ""
echo "Installing nfcpy"
apt-get install -y python-pip
pip install -U nfcpy


# add a line to: /usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py
# import errno
# immediately before: 
# from .socket import Socket                                         # noqa: F401
if [ ! -f "/usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py.pristine" ]
then
    cp /usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py \
       /usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py.pristine
    cat /usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py.pristine \
       | sed 's?from [.]socket import?import errno\'$'\nfrom .socket import?g' \
       > /usr/local/lib/python2.7/dist-packages/nfc/llcp/__init__.py

    
echo "Done install_worker.bsh" &>> ${log}
date &>> ${log}


echo "Setups Done!"
echo ""
echo "After the following reboot, access the CUPS administration app on any browser on the same LAN"
echo "After the following reboot, access the CUPS administration app on any browser on the same LAN" &>> ${log}
echo "It will be available at url(s):"
echo "It will be available at url(s):" &>> ${log}
for f in $(ifconfig | grep netmask | grep -v "127.0.0" | awk '{print $2}')
do
    echo "http://${f}:631"
    echo "http://${f}:631" &>> ${log}
done


echo "Done installation" &>> ${log}
date &>> ${log}

echo ""
echo "INFO: Rebooting..."
reboot now
